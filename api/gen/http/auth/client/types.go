// Code generated by goa v3.2.2, DO NOT EDIT.
//
// auth HTTP client types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	auth "github.com/tektoncd/hub/api/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// AuthenticateResponseBody is the type of the "auth" service "Authenticate"
// endpoint HTTP response body.
type AuthenticateResponseBody struct {
	// JWT
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
}

// AuthenticateInvalidCodeResponseBody is the type of the "auth" service
// "Authenticate" endpoint HTTP response body for the "invalid-code" error.
type AuthenticateInvalidCodeResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AuthenticateInternalErrorResponseBody is the type of the "auth" service
// "Authenticate" endpoint HTTP response body for the "internal-error" error.
type AuthenticateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewAuthenticateResultOK builds a "auth" service "Authenticate" endpoint
// result from a HTTP "OK" response.
func NewAuthenticateResultOK(body *AuthenticateResponseBody) *auth.AuthenticateResult {
	v := &auth.AuthenticateResult{
		Token: *body.Token,
	}

	return v
}

// NewAuthenticateInvalidCode builds a auth service Authenticate endpoint
// invalid-code error.
func NewAuthenticateInvalidCode(body *AuthenticateInvalidCodeResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewAuthenticateInternalError builds a auth service Authenticate endpoint
// internal-error error.
func NewAuthenticateInternalError(body *AuthenticateInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateAuthenticateResponseBody runs the validations defined on
// AuthenticateResponseBody
func ValidateAuthenticateResponseBody(body *AuthenticateResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	return
}

// ValidateAuthenticateInvalidCodeResponseBody runs the validations defined on
// Authenticate_invalid-code_Response_Body
func ValidateAuthenticateInvalidCodeResponseBody(body *AuthenticateInvalidCodeResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAuthenticateInternalErrorResponseBody runs the validations defined
// on Authenticate_internal-error_Response_Body
func ValidateAuthenticateInternalErrorResponseBody(body *AuthenticateInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
