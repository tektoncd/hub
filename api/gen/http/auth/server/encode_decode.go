// Code generated by goa v3.2.2, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	"context"
	"net/http"

	auth "github.com/tektoncd/hub/api/gen/auth"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAuthenticateResponse returns an encoder for responses returned by the
// auth Authenticate endpoint.
func EncodeAuthenticateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*auth.AuthenticateResult)
		enc := encoder(ctx, w)
		body := NewAuthenticateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAuthenticateRequest returns a decoder for requests sent to the auth
// Authenticate endpoint.
func DecodeAuthenticateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			code string
			err  error
		)
		code = r.URL.Query().Get("code")
		if code == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("code", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewAuthenticatePayload(code)

		return payload, nil
	}
}

// EncodeAuthenticateError returns an encoder for errors returned by the
// Authenticate auth endpoint.
func EncodeAuthenticateError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "invalid-code":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAuthenticateInvalidCodeResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid-code")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		case "internal-error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAuthenticateInternalErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal-error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "invalid-token":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAuthenticateInvalidTokenResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid-token")
			w.WriteHeader(http.StatusUnauthorized)
			return enc.Encode(body)
		case "invalid-scopes":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewAuthenticateInvalidScopesResponseBody(res)
			}
			w.Header().Set("goa-error", "invalid-scopes")
			w.WriteHeader(http.StatusForbidden)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalAuthAuthTokensToAuthTokensResponseBody builds a value of type
// *AuthTokensResponseBody from a value of type *auth.AuthTokens.
func marshalAuthAuthTokensToAuthTokensResponseBody(v *auth.AuthTokens) *AuthTokensResponseBody {
	res := &AuthTokensResponseBody{}
	if v.Access != nil {
		res.Access = marshalAuthTokenToTokenResponseBody(v.Access)
	}
	if v.Refresh != nil {
		res.Refresh = marshalAuthTokenToTokenResponseBody(v.Refresh)
	}

	return res
}

// marshalAuthTokenToTokenResponseBody builds a value of type
// *TokenResponseBody from a value of type *auth.Token.
func marshalAuthTokenToTokenResponseBody(v *auth.Token) *TokenResponseBody {
	if v == nil {
		return nil
	}
	res := &TokenResponseBody{
		Token:           v.Token,
		RefreshInterval: v.RefreshInterval,
		ExpiresAt:       v.ExpiresAt,
	}

	return res
}
