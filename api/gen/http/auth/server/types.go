// Code generated by goa v3.2.2, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	auth "github.com/tektoncd/hub/api/gen/auth"
	goa "goa.design/goa/v3/pkg"
)

// AuthenticateResponseBody is the type of the "auth" service "Authenticate"
// endpoint HTTP response body.
type AuthenticateResponseBody struct {
	// JSON Web Token with user details
	Token string `form:"token" json:"token" xml:"token"`
}

// AuthenticateInvalidCodeResponseBody is the type of the "auth" service
// "Authenticate" endpoint HTTP response body for the "invalid-code" error.
type AuthenticateInvalidCodeResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateInternalErrorResponseBody is the type of the "auth" service
// "Authenticate" endpoint HTTP response body for the "internal-error" error.
type AuthenticateInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateInvalidTokenResponseBody is the type of the "auth" service
// "Authenticate" endpoint HTTP response body for the "invalid-token" error.
type AuthenticateInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthenticateInvalidScopesResponseBody is the type of the "auth" service
// "Authenticate" endpoint HTTP response body for the "invalid-scopes" error.
type AuthenticateInvalidScopesResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewAuthenticateResponseBody builds the HTTP response body from the result of
// the "Authenticate" endpoint of the "auth" service.
func NewAuthenticateResponseBody(res *auth.AuthenticateResult) *AuthenticateResponseBody {
	body := &AuthenticateResponseBody{
		Token: res.Token,
	}
	return body
}

// NewAuthenticateInvalidCodeResponseBody builds the HTTP response body from
// the result of the "Authenticate" endpoint of the "auth" service.
func NewAuthenticateInvalidCodeResponseBody(res *goa.ServiceError) *AuthenticateInvalidCodeResponseBody {
	body := &AuthenticateInvalidCodeResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateInternalErrorResponseBody builds the HTTP response body from
// the result of the "Authenticate" endpoint of the "auth" service.
func NewAuthenticateInternalErrorResponseBody(res *goa.ServiceError) *AuthenticateInternalErrorResponseBody {
	body := &AuthenticateInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateInvalidTokenResponseBody builds the HTTP response body from
// the result of the "Authenticate" endpoint of the "auth" service.
func NewAuthenticateInvalidTokenResponseBody(res *goa.ServiceError) *AuthenticateInvalidTokenResponseBody {
	body := &AuthenticateInvalidTokenResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticateInvalidScopesResponseBody builds the HTTP response body from
// the result of the "Authenticate" endpoint of the "auth" service.
func NewAuthenticateInvalidScopesResponseBody(res *goa.ServiceError) *AuthenticateInvalidScopesResponseBody {
	body := &AuthenticateInvalidScopesResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthenticatePayload builds a auth service Authenticate endpoint payload.
func NewAuthenticatePayload(code string) *auth.AuthenticatePayload {
	v := &auth.AuthenticatePayload{}
	v.Code = code

	return v
}
