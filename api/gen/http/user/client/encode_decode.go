// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	user "github.com/tektoncd/hub/api/gen/user"
	goahttp "goa.design/goa/v3/http"
)

// BuildRefreshAccessTokenRequest instantiates a HTTP request object with
// method and path set to call the "user" service "RefreshAccessToken" endpoint
func (c *Client) BuildRefreshAccessTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RefreshAccessTokenUserPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("user", "RefreshAccessToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRefreshAccessTokenRequest returns an encoder for requests sent to the
// user RefreshAccessToken server.
func EncodeRefreshAccessTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*user.RefreshAccessTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("user", "RefreshAccessToken", "*user.RefreshAccessTokenPayload", v)
		}
		{
			head := p.RefreshToken
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeRefreshAccessTokenResponse returns a decoder for responses returned by
// the user RefreshAccessToken endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeRefreshAccessTokenResponse may return the following errors:
//	- "internal-error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "invalid-token" (type *goa.ServiceError): http.StatusUnauthorized
//	- "invalid-scopes" (type *goa.ServiceError): http.StatusForbidden
//	- error: internal error
func DecodeRefreshAccessTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RefreshAccessTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "RefreshAccessToken", err)
			}
			err = ValidateRefreshAccessTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "RefreshAccessToken", err)
			}
			res := NewRefreshAccessTokenResultOK(&body)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body RefreshAccessTokenInternalErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "RefreshAccessToken", err)
			}
			err = ValidateRefreshAccessTokenInternalErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "RefreshAccessToken", err)
			}
			return nil, NewRefreshAccessTokenInternalError(&body)
		case http.StatusUnauthorized:
			var (
				body RefreshAccessTokenInvalidTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "RefreshAccessToken", err)
			}
			err = ValidateRefreshAccessTokenInvalidTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "RefreshAccessToken", err)
			}
			return nil, NewRefreshAccessTokenInvalidToken(&body)
		case http.StatusForbidden:
			var (
				body RefreshAccessTokenInvalidScopesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("user", "RefreshAccessToken", err)
			}
			err = ValidateRefreshAccessTokenInvalidScopesResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("user", "RefreshAccessToken", err)
			}
			return nil, NewRefreshAccessTokenInvalidScopes(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("user", "RefreshAccessToken", resp.StatusCode, string(body))
		}
	}
}

// unmarshalAccessTokenResponseBodyToUserAccessToken builds a value of type
// *user.AccessToken from a value of type *AccessTokenResponseBody.
func unmarshalAccessTokenResponseBodyToUserAccessToken(v *AccessTokenResponseBody) *user.AccessToken {
	res := &user.AccessToken{}
	if v.Access != nil {
		res.Access = unmarshalTokenResponseBodyToUserToken(v.Access)
	}

	return res
}

// unmarshalTokenResponseBodyToUserToken builds a value of type *user.Token
// from a value of type *TokenResponseBody.
func unmarshalTokenResponseBodyToUserToken(v *TokenResponseBody) *user.Token {
	if v == nil {
		return nil
	}
	res := &user.Token{
		Token:           *v.Token,
		RefreshInterval: *v.RefreshInterval,
		ExpiresAt:       *v.ExpiresAt,
	}

	return res
}
