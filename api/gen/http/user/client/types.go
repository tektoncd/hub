// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user HTTP client types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	user "github.com/tektoncd/hub/api/gen/user"
	goa "goa.design/goa/v3/pkg"
)

// RefreshAccessTokenResponseBody is the type of the "user" service
// "RefreshAccessToken" endpoint HTTP response body.
type RefreshAccessTokenResponseBody struct {
	// User Access JWT
	Data *AccessTokenResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// RefreshAccessTokenInternalErrorResponseBody is the type of the "user"
// service "RefreshAccessToken" endpoint HTTP response body for the
// "internal-error" error.
type RefreshAccessTokenInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RefreshAccessTokenInvalidTokenResponseBody is the type of the "user" service
// "RefreshAccessToken" endpoint HTTP response body for the "invalid-token"
// error.
type RefreshAccessTokenInvalidTokenResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// RefreshAccessTokenInvalidScopesResponseBody is the type of the "user"
// service "RefreshAccessToken" endpoint HTTP response body for the
// "invalid-scopes" error.
type RefreshAccessTokenInvalidScopesResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// AccessTokenResponseBody is used to define fields on response body types.
type AccessTokenResponseBody struct {
	// Access Token for user
	Access *TokenResponseBody `form:"access,omitempty" json:"access,omitempty" xml:"access,omitempty"`
}

// TokenResponseBody is used to define fields on response body types.
type TokenResponseBody struct {
	// JWT
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// Duration the token will Expire In
	RefreshInterval *string `form:"refreshInterval,omitempty" json:"refreshInterval,omitempty" xml:"refreshInterval,omitempty"`
	// Time the token will expires at
	ExpiresAt *int64 `form:"expiresAt,omitempty" json:"expiresAt,omitempty" xml:"expiresAt,omitempty"`
}

// NewRefreshAccessTokenResultOK builds a "user" service "RefreshAccessToken"
// endpoint result from a HTTP "OK" response.
func NewRefreshAccessTokenResultOK(body *RefreshAccessTokenResponseBody) *user.RefreshAccessTokenResult {
	v := &user.RefreshAccessTokenResult{}
	v.Data = unmarshalAccessTokenResponseBodyToUserAccessToken(body.Data)

	return v
}

// NewRefreshAccessTokenInternalError builds a user service RefreshAccessToken
// endpoint internal-error error.
func NewRefreshAccessTokenInternalError(body *RefreshAccessTokenInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRefreshAccessTokenInvalidToken builds a user service RefreshAccessToken
// endpoint invalid-token error.
func NewRefreshAccessTokenInvalidToken(body *RefreshAccessTokenInvalidTokenResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewRefreshAccessTokenInvalidScopes builds a user service RefreshAccessToken
// endpoint invalid-scopes error.
func NewRefreshAccessTokenInvalidScopes(body *RefreshAccessTokenInvalidScopesResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRefreshAccessTokenResponseBody runs the validations defined on
// RefreshAccessTokenResponseBody
func ValidateRefreshAccessTokenResponseBody(body *RefreshAccessTokenResponseBody) (err error) {
	if body.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "body"))
	}
	if body.Data != nil {
		if err2 := ValidateAccessTokenResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRefreshAccessTokenInternalErrorResponseBody runs the validations
// defined on RefreshAccessToken_internal-error_Response_Body
func ValidateRefreshAccessTokenInternalErrorResponseBody(body *RefreshAccessTokenInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRefreshAccessTokenInvalidTokenResponseBody runs the validations
// defined on RefreshAccessToken_invalid-token_Response_Body
func ValidateRefreshAccessTokenInvalidTokenResponseBody(body *RefreshAccessTokenInvalidTokenResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateRefreshAccessTokenInvalidScopesResponseBody runs the validations
// defined on RefreshAccessToken_invalid-scopes_Response_Body
func ValidateRefreshAccessTokenInvalidScopesResponseBody(body *RefreshAccessTokenInvalidScopesResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateAccessTokenResponseBody runs the validations defined on
// AccessTokenResponseBody
func ValidateAccessTokenResponseBody(body *AccessTokenResponseBody) (err error) {
	if body.Access != nil {
		if err2 := ValidateTokenResponseBody(body.Access); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTokenResponseBody runs the validations defined on TokenResponseBody
func ValidateTokenResponseBody(body *TokenResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.RefreshInterval == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("refreshInterval", "body"))
	}
	if body.ExpiresAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expiresAt", "body"))
	}
	return
}
