// Code generated by goa v3.2.0, DO NOT EDIT.
//
// resource HTTP server types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	resource "github.com/tektoncd/hub/api/gen/resource"
	resourceviews "github.com/tektoncd/hub/api/gen/resource/views"
	goa "goa.design/goa/v3/pkg"
)

// ResourceResponseCollection is the type of the "resource" service "Query"
// endpoint HTTP response body.
type ResourceResponseCollection []*ResourceResponse

// VersionsByIDResponseBody is the type of the "resource" service
// "VersionsByID" endpoint HTTP response body.
type VersionsByIDResponseBody struct {
	// Latest Version of resource
	Latest *VersionResponseBody `form:"latest" json:"latest" xml:"latest"`
	// List of all versions of resource
	Versions []*VersionResponseBody `form:"versions" json:"versions" xml:"versions"`
}

// QueryInternalErrorResponseBody is the type of the "resource" service "Query"
// endpoint HTTP response body for the "internal-error" error.
type QueryInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// QueryNotFoundResponseBody is the type of the "resource" service "Query"
// endpoint HTTP response body for the "not-found" error.
type QueryNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInternalErrorResponseBody is the type of the "resource" service "List"
// endpoint HTTP response body for the "internal-error" error.
type ListInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VersionsByIDInternalErrorResponseBody is the type of the "resource" service
// "VersionsByID" endpoint HTTP response body for the "internal-error" error.
type VersionsByIDInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// VersionsByIDNotFoundResponseBody is the type of the "resource" service
// "VersionsByID" endpoint HTTP response body for the "not-found" error.
type VersionsByIDNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ResourceResponse is used to define fields on response body types.
type ResourceResponse struct {
	// ID is the unique id of the resource
	ID uint `form:"id" json:"id" xml:"id"`
	// Name of resource
	Name string `form:"name" json:"name" xml:"name"`
	// Type of catalog to which resource belongs
	Catalog *CatalogResponse `form:"catalog" json:"catalog" xml:"catalog"`
	// Type of resource
	Type string `form:"type" json:"type" xml:"type"`
	// Latest version of resource
	LatestVersion *LatestVersionResponse `form:"latestVersion" json:"latestVersion" xml:"latestVersion"`
	// Tags related to resource
	Tags []*TagResponse `form:"tags" json:"tags" xml:"tags"`
	// Rating of resource
	Rating float64 `form:"rating" json:"rating" xml:"rating"`
}

// CatalogResponse is used to define fields on response body types.
type CatalogResponse struct {
	// ID is the unique id of the catalog
	ID uint `form:"id" json:"id" xml:"id"`
	// Type of catalog
	Type string `form:"type" json:"type" xml:"type"`
}

// LatestVersionResponse is used to define fields on response body types.
type LatestVersionResponse struct {
	// ID is the unique id of resource's version
	ID uint `form:"id" json:"id" xml:"id"`
	// Version of resource
	Version string `form:"version" json:"version" xml:"version"`
	// Display name of version
	DisplayName string `form:"displayName" json:"displayName" xml:"displayName"`
	// Description of version
	Description string `form:"description" json:"description" xml:"description"`
	// Minimum pipelines version the resource's version is compatible with
	MinPipelinesVersion string `form:"minPipelinesVersion" json:"minPipelinesVersion" xml:"minPipelinesVersion"`
	// Raw URL of resource's yaml file of the version
	RawURL string `form:"rawURL" json:"rawURL" xml:"rawURL"`
	// Web URL of resource's yaml file of the version
	WebURL string `form:"webURL" json:"webURL" xml:"webURL"`
	// Timestamp when version was last updated
	UpdatedAt string `form:"updatedAt" json:"updatedAt" xml:"updatedAt"`
}

// TagResponse is used to define fields on response body types.
type TagResponse struct {
	// ID is the unique id of tag
	ID uint `form:"id" json:"id" xml:"id"`
	// Name of tag
	Name string `form:"name" json:"name" xml:"name"`
}

// VersionResponseBody is used to define fields on response body types.
type VersionResponseBody struct {
	// ID is the unique id of resource's version
	ID uint `form:"id" json:"id" xml:"id"`
	// Version of resource
	Version string `form:"version" json:"version" xml:"version"`
	// Raw URL of resource's yaml file of the version
	RawURL string `form:"rawURL" json:"rawURL" xml:"rawURL"`
	// Web URL of resource's yaml file of the version
	WebURL string `form:"webURL" json:"webURL" xml:"webURL"`
}

// NewResourceResponseCollection builds the HTTP response body from the result
// of the "Query" endpoint of the "resource" service.
func NewResourceResponseCollection(res resourceviews.ResourceCollectionView) ResourceResponseCollection {
	body := make([]*ResourceResponse, len(res))
	for i, val := range res {
		body[i] = marshalResourceviewsResourceViewToResourceResponse(val)
	}
	return body
}

// NewVersionsByIDResponseBody builds the HTTP response body from the result of
// the "VersionsByID" endpoint of the "resource" service.
func NewVersionsByIDResponseBody(res *resourceviews.VersionsView) *VersionsByIDResponseBody {
	body := &VersionsByIDResponseBody{}
	if res.Latest != nil {
		body.Latest = marshalResourceviewsVersionViewToVersionResponseBody(res.Latest)
	}
	if res.Versions != nil {
		body.Versions = make([]*VersionResponseBody, len(res.Versions))
		for i, val := range res.Versions {
			body.Versions[i] = marshalResourceviewsVersionViewToVersionResponseBody(val)
		}
	}
	return body
}

// NewQueryInternalErrorResponseBody builds the HTTP response body from the
// result of the "Query" endpoint of the "resource" service.
func NewQueryInternalErrorResponseBody(res *goa.ServiceError) *QueryInternalErrorResponseBody {
	body := &QueryInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewQueryNotFoundResponseBody builds the HTTP response body from the result
// of the "Query" endpoint of the "resource" service.
func NewQueryNotFoundResponseBody(res *goa.ServiceError) *QueryNotFoundResponseBody {
	body := &QueryNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInternalErrorResponseBody builds the HTTP response body from the
// result of the "List" endpoint of the "resource" service.
func NewListInternalErrorResponseBody(res *goa.ServiceError) *ListInternalErrorResponseBody {
	body := &ListInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVersionsByIDInternalErrorResponseBody builds the HTTP response body from
// the result of the "VersionsByID" endpoint of the "resource" service.
func NewVersionsByIDInternalErrorResponseBody(res *goa.ServiceError) *VersionsByIDInternalErrorResponseBody {
	body := &VersionsByIDInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewVersionsByIDNotFoundResponseBody builds the HTTP response body from the
// result of the "VersionsByID" endpoint of the "resource" service.
func NewVersionsByIDNotFoundResponseBody(res *goa.ServiceError) *VersionsByIDNotFoundResponseBody {
	body := &VersionsByIDNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewQueryPayload builds a resource service Query endpoint payload.
func NewQueryPayload(name string, type_ string, limit uint) *resource.QueryPayload {
	v := &resource.QueryPayload{}
	v.Name = name
	v.Type = type_
	v.Limit = limit

	return v
}

// NewListPayload builds a resource service List endpoint payload.
func NewListPayload(limit uint) *resource.ListPayload {
	v := &resource.ListPayload{}
	v.Limit = limit

	return v
}

// NewVersionsByIDPayload builds a resource service VersionsByID endpoint
// payload.
func NewVersionsByIDPayload(id uint) *resource.VersionsByIDPayload {
	v := &resource.VersionsByIDPayload{}
	v.ID = id

	return v
}
