// Code generated by goa v3.2.2, DO NOT EDIT.
//
// catalog HTTP server types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package server

import (
	catalog "github.com/tektoncd/hub/api/gen/catalog"
	catalogviews "github.com/tektoncd/hub/api/gen/catalog/views"
	goa "goa.design/goa/v3/pkg"
)

// RefreshRequestBody is the type of the "catalog" service "Refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	// Name of Organization the Catalog is in
	Org *string `form:"org,omitempty" json:"org,omitempty" xml:"org,omitempty"`
	// Name of Catalog
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// RefreshResponseBody is the type of the "catalog" service "Refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	// id of the job
	ID uint `form:"id" json:"id" xml:"id"`
	// status of the job
	Status string `form:"status" json:"status" xml:"status"`
}

// RefreshInternalErrorResponseBody is the type of the "catalog" service
// "Refresh" endpoint HTTP response body for the "internal-error" error.
type RefreshInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewRefreshResponseBody builds the HTTP response body from the result of the
// "Refresh" endpoint of the "catalog" service.
func NewRefreshResponseBody(res *catalogviews.JobView) *RefreshResponseBody {
	body := &RefreshResponseBody{
		ID:     *res.ID,
		Status: *res.Status,
	}
	return body
}

// NewRefreshInternalErrorResponseBody builds the HTTP response body from the
// result of the "Refresh" endpoint of the "catalog" service.
func NewRefreshInternalErrorResponseBody(res *goa.ServiceError) *RefreshInternalErrorResponseBody {
	body := &RefreshInternalErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewRefreshPayload builds a catalog service Refresh endpoint payload.
func NewRefreshPayload(body *RefreshRequestBody, token string) *catalog.RefreshPayload {
	v := &catalog.RefreshPayload{
		Org:  *body.Org,
		Name: *body.Name,
	}
	v.Token = token

	return v
}

// ValidateRefreshRequestBody runs the validations defined on RefreshRequestBody
func ValidateRefreshRequestBody(body *RefreshRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Org == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("org", "body"))
	}
	return
}
