// Code generated by goa v3.2.2, DO NOT EDIT.
//
// catalog HTTP client types
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package client

import (
	catalog "github.com/tektoncd/hub/api/gen/catalog"
	catalogviews "github.com/tektoncd/hub/api/gen/catalog/views"
	goa "goa.design/goa/v3/pkg"
)

// RefreshRequestBody is the type of the "catalog" service "Refresh" endpoint
// HTTP request body.
type RefreshRequestBody struct {
	// Name of Organization the Catalog is in
	Org string `form:"org" json:"org" xml:"org"`
	// Name of Catalog
	Name string `form:"name" json:"name" xml:"name"`
}

// RefreshResponseBody is the type of the "catalog" service "Refresh" endpoint
// HTTP response body.
type RefreshResponseBody struct {
	// id of the job
	ID *uint `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// status of the job
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// RefreshInternalErrorResponseBody is the type of the "catalog" service
// "Refresh" endpoint HTTP response body for the "internal-error" error.
type RefreshInternalErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewRefreshRequestBody builds the HTTP request body from the payload of the
// "Refresh" endpoint of the "catalog" service.
func NewRefreshRequestBody(p *catalog.RefreshPayload) *RefreshRequestBody {
	body := &RefreshRequestBody{
		Org:  p.Org,
		Name: p.Name,
	}
	return body
}

// NewRefreshJobOK builds a "catalog" service "Refresh" endpoint result from a
// HTTP "OK" response.
func NewRefreshJobOK(body *RefreshResponseBody) *catalogviews.JobView {
	v := &catalogviews.JobView{
		ID:     body.ID,
		Status: body.Status,
	}

	return v
}

// NewRefreshInternalError builds a catalog service Refresh endpoint
// internal-error error.
func NewRefreshInternalError(body *RefreshInternalErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateRefreshInternalErrorResponseBody runs the validations defined on
// Refresh_internal-error_Response_Body
func ValidateRefreshInternalErrorResponseBody(body *RefreshInternalErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
