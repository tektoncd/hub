// Code generated by goa v3.2.2, DO NOT EDIT.
//
// user service
//
// Command:
// $ goa gen github.com/tektoncd/hub/api/design

package user

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// The user service exposes endpoint to get user specific specs
type Service interface {
	// Refresh the access token of User
	RefreshAccessToken(context.Context, *RefreshAccessTokenPayload) (res *RefreshAccessTokenResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "user"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"RefreshAccessToken"}

// RefreshAccessTokenPayload is the payload type of the user service
// RefreshAccessToken method.
type RefreshAccessTokenPayload struct {
	// Refresh Token of User
	RefreshToken string
}

// RefreshAccessTokenResult is the result type of the user service
// RefreshAccessToken method.
type RefreshAccessTokenResult struct {
	// User Access JWT
	Data *AccessToken
}

// Access Token for User
type AccessToken struct {
	// Access Token for user
	Access *Token
}

// Token includes the JWT, Expire Duration & Time
type Token struct {
	// JWT
	Token string
	// Duration the token will Expire In
	RefreshInterval string
	// Time the token will expires at
	ExpiresAt int64
}

// MakeInvalidToken builds a goa.ServiceError from an error.
func MakeInvalidToken(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-token",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInvalidScopes builds a goa.ServiceError from an error.
func MakeInvalidScopes(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "invalid-scopes",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeInternalError builds a goa.ServiceError from an error.
func MakeInternalError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal-error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
